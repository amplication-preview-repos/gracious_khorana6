/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Quiz } from "./Quiz";
import { QuizCountArgs } from "./QuizCountArgs";
import { QuizFindManyArgs } from "./QuizFindManyArgs";
import { QuizFindUniqueArgs } from "./QuizFindUniqueArgs";
import { CreateQuizArgs } from "./CreateQuizArgs";
import { UpdateQuizArgs } from "./UpdateQuizArgs";
import { DeleteQuizArgs } from "./DeleteQuizArgs";
import { QuestionFindManyArgs } from "../../question/base/QuestionFindManyArgs";
import { Question } from "../../question/base/Question";
import { Category } from "../../category/base/Category";
import { QuizService } from "../quiz.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Quiz)
export class QuizResolverBase {
  constructor(
    protected readonly service: QuizService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Quiz",
    action: "read",
    possession: "any",
  })
  async _quizzesMeta(
    @graphql.Args() args: QuizCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Quiz])
  @nestAccessControl.UseRoles({
    resource: "Quiz",
    action: "read",
    possession: "any",
  })
  async quizzes(@graphql.Args() args: QuizFindManyArgs): Promise<Quiz[]> {
    return this.service.quizzes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Quiz, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Quiz",
    action: "read",
    possession: "own",
  })
  async quiz(@graphql.Args() args: QuizFindUniqueArgs): Promise<Quiz | null> {
    const result = await this.service.quiz(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Quiz)
  @nestAccessControl.UseRoles({
    resource: "Quiz",
    action: "create",
    possession: "any",
  })
  async createQuiz(@graphql.Args() args: CreateQuizArgs): Promise<Quiz> {
    return await this.service.createQuiz({
      ...args,
      data: {
        ...args.data,

        category: args.data.category
          ? {
              connect: args.data.category,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Quiz)
  @nestAccessControl.UseRoles({
    resource: "Quiz",
    action: "update",
    possession: "any",
  })
  async updateQuiz(@graphql.Args() args: UpdateQuizArgs): Promise<Quiz | null> {
    try {
      return await this.service.updateQuiz({
        ...args,
        data: {
          ...args.data,

          category: args.data.category
            ? {
                connect: args.data.category,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Quiz)
  @nestAccessControl.UseRoles({
    resource: "Quiz",
    action: "delete",
    possession: "any",
  })
  async deleteQuiz(@graphql.Args() args: DeleteQuizArgs): Promise<Quiz | null> {
    try {
      return await this.service.deleteQuiz(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Question], { name: "questions" })
  @nestAccessControl.UseRoles({
    resource: "Question",
    action: "read",
    possession: "any",
  })
  async findQuestions(
    @graphql.Parent() parent: Quiz,
    @graphql.Args() args: QuestionFindManyArgs
  ): Promise<Question[]> {
    const results = await this.service.findQuestions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Category, {
    nullable: true,
    name: "category",
  })
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "any",
  })
  async getCategory(@graphql.Parent() parent: Quiz): Promise<Category | null> {
    const result = await this.service.getCategory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => String)
  async InitiateQuiz(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.InitiateQuiz(args);
  }

  @graphql.Query(() => String)
  async PlayQuiz(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.PlayQuiz(args);
  }

  @graphql.Query(() => String)
  async StartQuiz(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.StartQuiz(args);
  }

  @graphql.Mutation(() => String)
  async UploadQuizData(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.UploadQuizData(args);
  }

  @graphql.Query(() => String)
  async UploadQuizJson(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.UploadQuizJson(args);
  }
}
