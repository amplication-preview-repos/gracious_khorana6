/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Quiz as PrismaQuiz,
  Question as PrismaQuestion,
  Category as PrismaCategory,
} from "@prisma/client";

export class QuizServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.QuizCountArgs, "select">): Promise<number> {
    return this.prisma.quiz.count(args);
  }

  async quizzes<T extends Prisma.QuizFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuizFindManyArgs>
  ): Promise<PrismaQuiz[]> {
    return this.prisma.quiz.findMany<Prisma.QuizFindManyArgs>(args);
  }
  async quiz<T extends Prisma.QuizFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuizFindUniqueArgs>
  ): Promise<PrismaQuiz | null> {
    return this.prisma.quiz.findUnique(args);
  }
  async createQuiz<T extends Prisma.QuizCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuizCreateArgs>
  ): Promise<PrismaQuiz> {
    return this.prisma.quiz.create<T>(args);
  }
  async updateQuiz<T extends Prisma.QuizUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuizUpdateArgs>
  ): Promise<PrismaQuiz> {
    return this.prisma.quiz.update<T>(args);
  }
  async deleteQuiz<T extends Prisma.QuizDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuizDeleteArgs>
  ): Promise<PrismaQuiz> {
    return this.prisma.quiz.delete(args);
  }

  async findQuestions(
    parentId: string,
    args: Prisma.QuestionFindManyArgs
  ): Promise<PrismaQuestion[]> {
    return this.prisma.quiz
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questions(args);
  }

  async getCategory(parentId: string): Promise<PrismaCategory | null> {
    return this.prisma.quiz
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }
  async InitiateQuiz(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async PlayQuiz(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async StartQuiz(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async UploadQuizData(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async UploadQuizJson(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
