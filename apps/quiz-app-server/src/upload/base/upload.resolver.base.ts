/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Upload } from "./Upload";
import { UploadCountArgs } from "./UploadCountArgs";
import { UploadFindManyArgs } from "./UploadFindManyArgs";
import { UploadFindUniqueArgs } from "./UploadFindUniqueArgs";
import { CreateUploadArgs } from "./CreateUploadArgs";
import { UpdateUploadArgs } from "./UpdateUploadArgs";
import { DeleteUploadArgs } from "./DeleteUploadArgs";
import { UploadService } from "../upload.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Upload)
export class UploadResolverBase {
  constructor(
    protected readonly service: UploadService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Upload",
    action: "read",
    possession: "any",
  })
  async _uploadsMeta(
    @graphql.Args() args: UploadCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Upload])
  @nestAccessControl.UseRoles({
    resource: "Upload",
    action: "read",
    possession: "any",
  })
  async uploads(@graphql.Args() args: UploadFindManyArgs): Promise<Upload[]> {
    return this.service.uploads(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Upload, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Upload",
    action: "read",
    possession: "own",
  })
  async upload(
    @graphql.Args() args: UploadFindUniqueArgs
  ): Promise<Upload | null> {
    const result = await this.service.upload(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Upload)
  @nestAccessControl.UseRoles({
    resource: "Upload",
    action: "create",
    possession: "any",
  })
  async createUpload(@graphql.Args() args: CreateUploadArgs): Promise<Upload> {
    return await this.service.createUpload({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Upload)
  @nestAccessControl.UseRoles({
    resource: "Upload",
    action: "update",
    possession: "any",
  })
  async updateUpload(
    @graphql.Args() args: UpdateUploadArgs
  ): Promise<Upload | null> {
    try {
      return await this.service.updateUpload({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Upload)
  @nestAccessControl.UseRoles({
    resource: "Upload",
    action: "delete",
    possession: "any",
  })
  async deleteUpload(
    @graphql.Args() args: DeleteUploadArgs
  ): Promise<Upload | null> {
    try {
      return await this.service.deleteUpload(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Upload)
  async uploadFile(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: UploadFindUniqueArgs
  ): Promise<Upload> {
    return await this.service.uploadFile(args, file);
  }

  @graphql.Mutation(() => Upload)
  async deleteFile(
    @graphql.Args()
    args: UploadFindUniqueArgs
  ): Promise<Upload> {
    return await this.service.deleteFile(args);
  }
}
